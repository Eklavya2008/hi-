<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expert-Level Interactive Flower Animation</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: radial-gradient(circle, #fffbf1, #f1f1f1);
      font-family: 'Arial', sans-serif;
    }
    canvas {
      position: absolute;
      top: 0;
      left: 0;
      pointer-events: none;
      cursor: none;
    }
    #gui {
      position: fixed;
      top: 20px;
      left: 20px;
      color: #333;
      font-size: 24px;
      font-weight: bold;
      z-index: 100;
    }
    #subtext {
      position: fixed;
      top: 70px;
      left: 20px;
      color: #555;
      font-size: 14px;
      font-style: italic;
      z-index: 100;
    }
  </style>
</head>
<body>
  <div id="gui">Click / Move to see the magic</div>
  <div id="subtext">I truly need an iPad to pursue my dreams! Please support me by voting â€“ your vote will make a huge difference!</div>

  <script>
    class Flower {
      constructor(x, y) {
        this.x = x;
        this.y = y;
        this.size = Math.random() * 20 + 30;
        this.alpha = 1;
        this.color = Flower.getRandomColor();
        this.petalCount = Math.floor(Math.random() * 4 + 6);
        this.petalLength = Math.random() * 40 + 50;
        this.petalWidth = Math.random() * 20 + 15;
        this.rotation = Math.random() * Math.PI * 2;
        this.swayFactor = Math.random() * 0.02 + 0.01;
        this.bloomProgress = 0;
        this.xOffset = 0;
        this.yOffset = 0;
        this.velocityX = 0;
        this.velocityY = 0;
      }

      static getRandomColor() {
        const colors = [
          'hsl(60, 100%, 50%)',  // Bright Yellow
          'hsl(0, 100%, 50%)',   // Vivid Red
          'hsl(120, 100%, 50%)', // Fresh Green
          'hsl(200, 100%, 50%)', // Bright Blue
          'hsl(270, 100%, 60%)', // Playful Purple
        ];
        return colors[Math.floor(Math.random() * colors.length)];
      }

      update() {
        this.bloomProgress += 0.03;
        this.alpha = this.lerp(this.alpha, 0, 0.05);  // Quick fade out
        this.x += this.velocityX;
        this.y += this.velocityY;
      }

      lerp(start, end, t) {
        return start + (end - start) * t;
      }

      draw(ctx) {
        ctx.save();
        ctx.translate(this.x + this.xOffset, this.y + this.yOffset);
        const rotationOffset = Math.sin(Date.now() * 0.001) * 0.05;
        ctx.rotate(this.rotation + rotationOffset);

        ctx.globalAlpha = this.alpha;
        const bloomFactor = Math.min(this.bloomProgress, 1);

        // Draw petals
        for (let i = 0; i < this.petalCount; i++) {
          const angle = Math.PI * 2 * (i / this.petalCount);
          ctx.save();
          ctx.rotate(angle);

          ctx.beginPath();
          ctx.moveTo(0, 0);
          ctx.bezierCurveTo(
            this.petalWidth / 2 * bloomFactor, -this.petalLength / 3 * bloomFactor,
            this.petalWidth / 2 * bloomFactor, -this.petalLength * bloomFactor,
            0, -this.petalLength * bloomFactor
          );
          ctx.bezierCurveTo(
            -this.petalWidth / 2 * bloomFactor, -this.petalLength * bloomFactor,
            -this.petalWidth / 2 * bloomFactor, -this.petalLength / 3 * bloomFactor,
            0, 0
          );

          ctx.fillStyle = this.color;
          ctx.fill();
          ctx.restore();
        }

        // Flower center with gradient
        const centerGradient = ctx.createRadialGradient(0, 0, this.size / 8, 0, 0, this.size / 4);
        centerGradient.addColorStop(0, 'hsl(60, 100%, 50%)');  // Bright Yellow center
        centerGradient.addColorStop(1, 'hsl(120, 100%, 55%)');  // Soft Green outer ring
        ctx.beginPath();
        ctx.arc(0, 0, this.size / 4, 0, Math.PI * 2);
        ctx.fillStyle = centerGradient;
        ctx.fill();

        ctx.restore();
      }
    }

    class FlowerField {
      constructor() {
        this.flowers = [];
        this.maxFlowers = 200;
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d');
        document.body.appendChild(this.canvas);
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;

        this.mouseX = window.innerWidth / 2;
        this.mouseY = window.innerHeight / 2;
        this.setupListeners();
        this.render();
      }

      setupListeners() {
        document.addEventListener('mousemove', this.onMouseMove.bind(this));
        document.addEventListener('click', this.onClick.bind(this));
        window.addEventListener('resize', this.onResize.bind(this));
      }

      onMouseMove(event) {
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;

        const newFlower = new Flower(this.mouseX, this.mouseY);
        this.flowers.push(newFlower);
        if (this.flowers.length > this.maxFlowers) {
          this.flowers.shift();
        }
      }

      onClick(event) {
        const newFlower = new Flower(event.clientX, event.clientY);
        this.flowers.push(newFlower);
        if (this.flowers.length > this.maxFlowers) {
          this.flowers.shift();
        }
      }

      onResize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
      }

      render() {
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        this.flowers.forEach((flower, index) => {
          flower.update();
          if (flower.alpha <= 0.01) {
            this.flowers.splice(index, 1);
          } else {
            flower.draw(this.ctx);
          }
        });

        requestAnimationFrame(this.render.bind(this));
      }
    }

    new FlowerField();
  </script>
</body>
</html>
